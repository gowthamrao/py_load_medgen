from typing import Iterator, List, Tuple

# Using the `medgen_names` table for testing as it's simple and effective.

# --- DDL Constants ---

STAGING_NAMES_DDL = """
CREATE UNLOGGED TABLE IF NOT EXISTS {table_name} (
    cui VARCHAR(10) NOT NULL,
    name TEXT NOT NULL,
    source VARCHAR(40) NOT NULL,
    suppress CHAR(1) NOT NULL,
    raw_record TEXT
);
"""

PRODUCTION_NAMES_DDL = """
CREATE TABLE IF NOT EXISTS {table_name} (
    name_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cui VARCHAR(10) NOT NULL,
    name TEXT NOT NULL,
    source VARCHAR(40) NOT NULL,
    suppress CHAR(1) NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT true,
    last_updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    raw_record TEXT
);
"""

PRODUCTION_NAMES_INDEXES_DDL = [
    "CREATE INDEX IF NOT EXISTS idx_{table_name}_cui ON {table_name} (cui);",
    "CREATE INDEX IF NOT EXISTS idx_{table_name}_is_active ON {table_name} (is_active);",
]


# --- Test Data ---

# Represents the initial state of the data for the first load.
INITIAL_NAMES_DATA: List[Tuple[str, ...]] = [
    # This record will be unchanged in the delta load.
    ("C0000001", "Name A", "SRC1", "N", "raw_record_1"),
    # This record will be updated in the delta load.
    ("C0000002", "Name B", "SRC1", "N", "raw_record_2"),
    # This record will be "deleted" in the delta load (it will be absent).
    ("C0000003", "Name C", "SRC1", "N", "raw_record_3"),
]

# Represents the new state of the data for the delta load.
DELTA_NAMES_DATA: List[Tuple[str, ...]] = [
    # Unchanged record.
    ("C0000001", "Name A", "SRC1", "N", "raw_record_1"),
    # Updated record (Name B -> Name B Updated).
    ("C0000002", "Name B Updated", "SRC1", "N", "raw_record_2_updated"),
    # New record.
    ("C0000004", "Name D", "SRC2", "Y", "raw_record_4"),
]


# --- Helper Function ---


def generate_tsv_stream(data: List[Tuple[str, ...]]) -> Iterator[bytes]:
    """
    Converts a list of tuples into a byte-stream iterator of TSV lines,
    simulating the output of the transformer component.
    """
    for row in data:
        line = "\t".join(map(str, row)) + "\n"
        yield line.encode("utf-8")
